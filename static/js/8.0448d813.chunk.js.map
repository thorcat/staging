{"version":3,"sources":["views/PoolView/PoolView.style.ts","views/PoolView/PoolView.tsx","views/Pools/Pools.style.ts","views/Pools/Pools.tsx","views/Pools/index.ts"],"names":["Container","styled","div","PoolTableView","ActionContainer","Table","UnstyledTable","CenterAlign","SymbolData","PoolFilterWrapper","media","md","PoolView","history","useHistory","dispatch","useDispatch","runeToCurrency","useGlobalState","useMidgard","actions","pools","poolLoading","useState","selectedPoolStatus","setSelectedPoolStatus","selectedPoolType","setSelectedPoolType","keyword","setKeyword","handleLoadPoolData","useCallback","getPools","handleChangeKeyword","e","target","value","centerAlign","rightAlign","poolActions","useMemo","key","align","responsive","title","onClick","typevalue","round","fixedWidth","SyncOutlined","render","_","pool","swapRouter","getSwapRoute","asset","Asset","RUNE","liquidityRouter","getAddLiquidityRoute","detail","status","to","stopPropagation","style","marginRight","SwapOutlined","poolColumns","ticker","size","color","type","sortDirections","sorter","a","b","sortsBefore","chainToString","chain","localeCompare","Amount","fromAssetAmount","assetPriceUSD","toFixed","fromMidgard","runeDepth","mul","toCurrencyFormat","defaultSortOrder","volume24h","Percent","poolAPY","filteredPools","poolsByStatus","filter","poolsByType","poolStr","toString","toLowerCase","chainStr","assetType","keywordStr","includes","renderPoolview","columns","dataSource","loading","onRow","record","push","getPoolDetailRoute","rowKey","selected","prefix","SearchOutlined","sizevalue","placeholder","onChange","ContentView","palette","Pools","content"],"mappings":"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","file":"static/js/8.0448d813.chunk.js","sourcesContent":["import { Table as UnstyledTable } from 'components'\nimport styled from 'styled-components'\n\nimport { media } from 'helpers/style'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nexport const PoolTableView = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n`\n\nexport const ActionContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const Section = styled.div`\n  margin-bottom: 20px;\n`\n\nexport const Table = styled(UnstyledTable)`\n  .ant-table-row {\n    cursor: pointer;\n  }\n`\n\nexport const CenterAlign = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SymbolData = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 8px;\n  width: 50px;\n`\n\nexport const PoolFilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .pool-status-filter {\n    margin-bottom: 10px;\n\n    ${media.md`\n      margin-bottom: 0px;\n    `}\n  }\n\n  ${media.md`\n    flex-direction: row;\n    justify-content: space-between;\n  `}\n`\n","import React, { useState, useCallback, useMemo } from 'react'\n\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport { SyncOutlined, SwapOutlined, SearchOutlined } from '@ant-design/icons'\nimport { chainToString } from '@xchainjs/xchain-util'\nimport { Breakpoint } from 'antd/lib/_util/responsiveObserve'\nimport { ColumnType } from 'antd/lib/table'\nimport {\n  AssetIcon,\n  PoolStatusFilter,\n  Button,\n  Input,\n  Label,\n  PoolTypeFilter,\n} from 'components'\nimport { PoolStatus } from 'midgard-sdk'\nimport { Amount, Asset, Percent, Pool } from 'multichain-sdk'\nimport { AlignType } from 'rc-table/lib/interface'\n\nimport { useGlobalState } from 'redux/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport {\n  getSwapRoute,\n  getPoolDetailRoute,\n  getAddLiquidityRoute,\n} from 'settings/constants'\n\nimport * as Styled from './PoolView.style'\n\nexport const PoolView = () => {\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const { runeToCurrency } = useGlobalState()\n  const { actions, pools, poolLoading } = useMidgard()\n\n  const [selectedPoolStatus, setSelectedPoolStatus] = useState<PoolStatus>(\n    'available',\n  )\n\n  const [selectedPoolType, setSelectedPoolType] = useState<string>('All')\n\n  const [keyword, setKeyword] = useState('')\n\n  const handleLoadPoolData = useCallback(() => {\n    dispatch(actions.getPools())\n  }, [dispatch, actions])\n\n  const handleChangeKeyword = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setKeyword(e.target.value)\n    },\n    [],\n  )\n\n  const centerAlign = 'center' as AlignType\n  const rightAlign = 'right' as AlignType\n\n  const poolActions = useMemo(\n    () => ({\n      key: 'action',\n      align: centerAlign,\n      responsive: ['md'] as Breakpoint[],\n      title: (\n        <Styled.ActionContainer>\n          <Button\n            onClick={handleLoadPoolData}\n            typevalue=\"outline\"\n            round\n            fixedWidth={false}\n          >\n            <SyncOutlined />\n            refresh\n          </Button>\n        </Styled.ActionContainer>\n      ),\n      render: (_: string, pool: Pool) => {\n        const swapRouter = getSwapRoute(pool.asset, Asset.RUNE())\n        const liquidityRouter = getAddLiquidityRoute(pool.asset)\n\n        return (\n          <Styled.ActionContainer>\n            {pool.detail.status === 'available' && (\n              <Link to={swapRouter} onClick={(e) => e.stopPropagation()}>\n                <Button round style={{ marginRight: '8px' }}>\n                  <SwapOutlined />\n                  SWAP\n                </Button>\n              </Link>\n            )}\n            <Link to={liquidityRouter} onClick={(e) => e.stopPropagation()}>\n              <Button round>Liquidity</Button>\n            </Link>\n          </Styled.ActionContainer>\n        )\n      },\n    }),\n    [handleLoadPoolData],\n  )\n\n  const poolColumns: ColumnType<Pool>[] = useMemo(\n    () => [\n      {\n        key: 'Pool',\n        title: 'Pool',\n        render: (pool: Pool) => (\n          <Styled.CenterAlign>\n            <AssetIcon asset={pool.asset} />\n            <Styled.SymbolData>\n              <Label>{pool.asset.ticker}</Label>\n              <Label size=\"small\" color=\"gray\">\n                {pool.asset.type}\n              </Label>\n            </Styled.SymbolData>\n          </Styled.CenterAlign>\n        ),\n        align: centerAlign,\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) => a.asset.sortsBefore(b.asset),\n      },\n      {\n        key: 'Chain',\n        title: 'Network',\n        align: centerAlign,\n        responsive: ['md'] as Breakpoint[],\n        render: (pool: Pool) => chainToString(pool.asset.chain),\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) =>\n          chainToString(a.asset.chain).localeCompare(\n            chainToString(b.asset.chain),\n          ),\n      },\n      {\n        key: 'Price',\n        title: 'USD Price',\n        render: (pool: Pool) =>\n          `$${Amount.fromAssetAmount(pool.detail.assetPriceUSD, 8).toFixed(3)}`,\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        responsive: ['md'] as Breakpoint[],\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Amount.fromAssetAmount(a.detail.assetPriceUSD, 8),\n            Amount.fromAssetAmount(b.detail.assetPriceUSD, 8),\n          ),\n      },\n      {\n        key: 'Liquidity',\n        title: 'Liquidity',\n        render: (pool: Pool) =>\n          runeToCurrency(\n            Amount.fromMidgard(pool.detail.runeDepth).mul(2),\n          ).toCurrencyFormat(2),\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        defaultSortOrder: 'descend',\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Amount.fromMidgard(a.detail.runeDepth),\n            Amount.fromMidgard(b.detail.runeDepth),\n          ),\n      },\n      {\n        key: 'Volume24h',\n        title: '24H Volume',\n        render: (pool: Pool) =>\n          runeToCurrency(\n            Amount.fromMidgard(pool.detail.volume24h),\n          ).toCurrencyFormat(2),\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Amount.fromMidgard(a.detail.volume24h),\n            Amount.fromMidgard(b.detail.volume24h),\n          ),\n      },\n      {\n        key: 'APY',\n        title: 'APY',\n        responsive: ['md'] as Breakpoint[],\n        render: (pool: Pool) =>\n          `${new Percent(pool.detail.poolAPY).toFixed(0)}`,\n        align: rightAlign,\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a: Pool, b: Pool) =>\n          Amount.sorter(\n            Percent.fromMidgard(a.detail.poolAPY),\n            Percent.fromMidgard(b.detail.poolAPY),\n          ),\n      },\n      poolActions,\n    ],\n    [poolActions, runeToCurrency],\n  )\n\n  const filteredPools = useMemo(() => {\n    // filter by status\n    const poolsByStatus = pools.filter(\n      (pool) => pool.detail.status === selectedPoolStatus,\n    )\n\n    // filter by pool asset type\n    const poolsByType =\n      selectedPoolType !== 'All'\n        ? poolsByStatus.filter((pool) => pool.asset.type === selectedPoolType)\n        : poolsByStatus\n\n    // filter by keyword\n    if (keyword) {\n      return poolsByType.filter((pool) => {\n        const poolStr = pool.asset.toString().toLowerCase()\n        const chainStr = chainToString(pool.asset.chain).toLowerCase()\n        const assetType = pool.asset.type.toLowerCase()\n        const keywordStr = keyword.toLowerCase()\n\n        return (\n          poolStr.includes(keywordStr) ||\n          chainStr.includes(keywordStr) ||\n          assetType.includes(keywordStr)\n        )\n      })\n    }\n\n    return poolsByType\n  }, [pools, keyword, selectedPoolStatus, selectedPoolType])\n\n  const renderPoolview = useMemo(\n    () => (\n      <Styled.Table\n        columns={poolColumns}\n        dataSource={filteredPools}\n        loading={poolLoading}\n        onRow={(record: Pool) => ({\n          onClick: () => history.push(getPoolDetailRoute(record)),\n        })}\n        rowKey=\"key\"\n      />\n    ),\n    [poolColumns, filteredPools, poolLoading, history],\n  )\n\n  return (\n    <Styled.Container>\n      <Styled.PoolFilterWrapper>\n        <PoolStatusFilter\n          selected={selectedPoolStatus}\n          onClick={setSelectedPoolStatus}\n        />\n        <PoolTypeFilter\n          selected={selectedPoolType}\n          onClick={setSelectedPoolType}\n        />\n      </Styled.PoolFilterWrapper>\n      <Styled.PoolTableView>\n        <Input\n          prefix={<SearchOutlined />}\n          sizevalue=\"big\"\n          placeholder=\"Search pool by name, network or type...\"\n          value={keyword}\n          onChange={handleChangeKeyword}\n        />\n        {renderPoolview}\n      </Styled.PoolTableView>\n    </Styled.Container>\n  )\n}\n","import { ContentView, Table as UnstyledTable } from 'components'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nexport const Container = styled(ContentView)`\n  background: transparent// ${palette('background', 0)};\n  margin-top: -20px;\n`\nexport const PoolTableView = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n`\n\nexport const ActionContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const Section = styled.div`\n  margin-bottom: 20px;\n`\n\nexport const Table = styled(UnstyledTable)`\n  .ant-table-row {\n    cursor: pointer;\n  }\n`\n\nexport const CenterAlign = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SymbolData = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 8px;\n  width: 50px;\n`\n","import React from 'react'\n\nimport { Helmet } from 'components'\n\nimport { PoolView } from '../PoolView'\nimport * as Styled from './Pools.style'\n\nconst Pools = () => {\n  return (\n    <Styled.Container>\n      <Helmet title=\"Pools\" content=\"Pools\" />\n      <PoolView />\n    </Styled.Container>\n  )\n}\n\nexport default Pools\n","import Pools from './Pools'\n\nexport default Pools\n"],"sourceRoot":""}