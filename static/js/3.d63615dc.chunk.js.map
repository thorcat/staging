{"version":3,"sources":["helpers/networkFee.ts","hooks/useBalance.ts","hooks/useNetworkFee.ts","hooks/useTxTracker.ts","../node_modules/query-string/index.js","../node_modules/filter-obj/index.js","hooks/useAffiliates.ts","views/Swap/PanelView/PanelView.style.ts","views/Swap/PanelView/PanelView.tsx","views/Swap/Swap.style.ts","views/Swap/utils.ts","views/Swap/Swap.tsx","hooks/useApprove.ts","helpers/error.ts","views/Swap/index.ts"],"names":["multiplier","average","fast","fastest","getGasRateByChain","inboundData","chain","chainInboundData","find","data","Number","gas_rate","getGasRateByFeeOption","feeOptionType","useBalance","dispatch","useDispatch","useSelector","state","app","wallet","midgard","reloadBalanceByChain","useCallback","walletActions","reloadAllBalance","getMaxBalance","asset","L1Chain","Amount","fromAssetAmount","gasRate","inboundFee","NetworkFee","getNetworkFeeByAsset","direction","balance","getAssetBalance","amount","maxSpendableAmount","isGasAsset","sub","mul","gt","decimal","useNetworkFee","inputAsset","outputAsset","useApp","useMidgard","pools","useMemo","outboundFee","totalFee","outboundFeeInSendAsset","AssetAmount","totalPriceIn","price","eq","add","totalFeeInUSD","Asset","USD","useTxTracker","addNewTxTracker","updateTxTracker","clearTxTrackers","processSubmittedTx","submitTransaction","type","submitTx","uuid","uuidv4","status","TxTrackerStatus","Submitting","action","refunded","pollTransaction","txTracker","Pending","setTxFailed","Failed","strictUriEncode","require","decodeComponent","splitOnFirst","filterObject","validateArrayFormatSeparator","value","length","TypeError","encode","options","strict","encodeURIComponent","decode","keysSorter","input","Array","isArray","sort","Object","keys","a","b","map","key","removeHash","hashStart","indexOf","slice","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","result","accumulator","exec","replace","undefined","concat","includes","isEncodedArray","newValue","split","item","parserForArrayFormat","ret","create","param","k","reduce","Boolean","exports","stringify","object","shouldFilter","skipNull","skipEmptyString","index","join","encoderForArrayFormat","objectCopy","filter","x","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","getHash","pick","exclude","exclusionFilter","module","obj","predicate","isArr","i","val","useAffiliates","useLocation","search","refs","JSON","ADDRESS","e","Container","styled","Panel","ContentPanel","div","media","sm","HeaderContent","HeaderMenu","palette","props","selected","PanelView","meta","children","Helmet","title","content","SettingsOverlay","ToolContainer","SwitchPair","ConfirmButtonContainer","ConfirmModalContent","RecipientAddrWrapper","SwapInfo","ApproveBtn","FancyButton","getSwapPair","pair","output","decodeFromURL","setDecimal","getSwapTrackerType","swap","isSynth","synthType","SynthType","MINT","TxTrackerType","Mint","REDEEM","Redeem","Swap","FromCard","ToCard","SwapPage","history","useHistory","allPools","poolLoading","slippageTolerance","affiliates","haltedChains","useMimir","useWallet","isWalletLoading","setIsConnectModalOpen","isConnected","hasConnectedWallet","handleClickWalletBtn","filteredAffiliates","affiliate","multichain","validateAddress","Chain","THORChain","address","hasWallet","approveStatus","useState","isApproved","setApproved","isWalletConnected","useEffect","toString","Success","isAssetApproved","approved","checkApproved","assetApproveStatus","useApprove","isTradingHalted","inTradeInboundData","outTradeInboundData","inTradeMimirStatus","outTradeMimirStatus","halted","walletConnected","hasWalletConnected","inputAssets","detail","poolAssets","assets","pool","push","RUNE","LUNA","synthAssets","synthAsset","symbol","outputAssets","IS_SYNTH_ACTIVE","inputAmount","setInputAmount","chainRecipient","setChainRecipient","recipient","setRecipient","visibleConfirmModal","setVisibleConfirmModal","visibleApproveModal","setVisibleApproveModal","affiliateFee","isLTC","isBTC","isDOGE","AmountType","ASSET_AMOUNT","AFFILIATE_FEE","totalFeePlusAffiliate","isValidAddress","inputAssetAmount","inboundFeeInInputAsset","outboundFeeInOutputAsset","slip","fee","error","console","log","outputAmount","outputAmountAfterFee","slipPercent","Percent","minReceive","minOutputAmount","inputAssetPriceInUSD","Price","baseAsset","priceAmount","outputAssetPriceInUSD","getWalletAddressByChain","maxInputBalance","inputAssetBalance","handleSelectInputAsset","getSwapRoute","handleSelectOutputAsset","handleSwitchPair","handleChangeInputAmount","handleChangePercent","p","newAmount","handleSelectMax","handleConfirm","trackerType","trackId","inAssets","toSignificant","outAssets","txHash","txID","msg","description","Notification","message","duration","handleCancel","handleConfirmApprove","Approve","approveAsset","handleSwap","hasInSufficientFee","handleApprove","isValidSwap","IS_TESTNET","valid","isValid","isValidSlip","isSlipValid","btnLabel","renderConfirmModalContent","name","toUpperCase","truncateAddress","toFixed","tooltip","SLIP_TOOLTIP_LABEL","MIN_RECEIVED_LABEL","toCurrencyFormat","TX_FEE_TOOLTIP_LABEL","renderApproveModal","poolAsset","isRUNE","onChange","onSelect","onMax","usdPrice","onClick","SwapOutlined","inputProps","disabled","chainAddr","onAddressChange","loading","visible","onOk","onCancel","SwapView","getAffiliates","filteredAddresses","affiliateAddress","setAffiliates","useParams","swapPair","setSwapPair","swapPairData","getPair"],"mappings":"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","file":"static/js/3.d63615dc.chunk.js","sourcesContent":["import { FeeOption } from '@xchainjs/xchain-client'\nimport { Chain } from '@xchainjs/xchain-util'\nimport { InboundAddressesItem } from 'midgard-sdk'\n\nconst multiplier: Record<FeeOption, number> = {\n  average: 0.67,\n  fast: 1,\n  fastest: 1.5,\n}\n\n// Reference issue: https://github.com/thorchain/asgardex-electron/issues/1381\nexport const getGasRateByChain = ({\n  inboundData,\n  chain,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n}): number => {\n  const chainInboundData = inboundData.find((data) => data.chain === chain)\n\n  return Number(chainInboundData?.gas_rate ?? 0)\n}\n\nexport const getGasRateByFeeOption = ({\n  inboundData,\n  chain,\n  feeOptionType,\n}: {\n  inboundData: InboundAddressesItem[]\n  chain: Chain\n  feeOptionType: FeeOption\n}) => {\n  return getGasRateByChain({ inboundData, chain }) * multiplier[feeOptionType]\n}\n","import { useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Asset, Amount, getAssetBalance, NetworkFee } from 'multichain-sdk'\n\nimport { SupportedChain } from 'multichain-sdk/clients/types'\n\nimport { RootState } from 'redux/store'\nimport * as walletActions from 'redux/wallet/actions'\n\nimport { getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useBalance = () => {\n  const dispatch = useDispatch()\n  const { feeOptionType } = useSelector((state: RootState) => state.app)\n  const { wallet } = useSelector((state: RootState) => state.wallet)\n  const { inboundData } = useSelector((state: RootState) => state.midgard)\n\n  const reloadBalanceByChain = useCallback(\n    (chain: SupportedChain) => {\n      dispatch(walletActions.getWalletByChain(chain))\n    },\n    [dispatch],\n  )\n\n  const reloadAllBalance = useCallback(() => {\n    dispatch(walletActions.loadAllWallets())\n  }, [dispatch])\n\n  const getMaxBalance = useCallback(\n    (asset: Asset): Amount => {\n      if (!wallet?.[asset.L1Chain as SupportedChain]) {\n        // allow max amount for emulation if wallet is not connected\n        return Amount.fromAssetAmount(0, 8)\n      }\n\n      // calculate inbound fee\n      const gasRate = getGasRateByFeeOption({\n        inboundData,\n        chain: asset.L1Chain,\n        feeOptionType,\n      })\n      const inboundFee = NetworkFee.getNetworkFeeByAsset({\n        asset,\n        gasRate,\n        direction: 'inbound',\n      })\n\n      const balance = getAssetBalance(asset, wallet).amount\n\n      /**\n       * if asset is used for gas, subtract the inbound gas fee from input amount\n       * else allow full amount\n       * Calc: max spendable amount = balance amount - 2 x gas fee(if send asset equals to gas asset)\n       */\n\n      const maxSpendableAmount = asset.isGasAsset()\n        ? balance.sub(inboundFee.mul(1.5).amount)\n        : balance\n\n      if (maxSpendableAmount.gt(0)) {\n        return maxSpendableAmount\n      }\n\n      return Amount.fromAssetAmount(0, asset.decimal)\n    },\n    [wallet, feeOptionType, inboundData],\n  )\n\n  return {\n    getMaxBalance,\n    reloadAllBalance,\n    reloadBalanceByChain,\n    wallet,\n  }\n}\n","import { useMemo } from 'react'\n\nimport { Asset, Amount, AssetAmount, NetworkFee, Pool } from 'multichain-sdk'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\n\nimport { getGasRateByChain, getGasRateByFeeOption } from 'helpers/networkFee'\n\nexport const useNetworkFee = ({\n  inputAsset,\n  outputAsset,\n}: {\n  inputAsset: Asset\n  outputAsset?: Asset\n}) => {\n  const { feeOptionType } = useApp()\n  const { inboundData, pools } = useMidgard()\n\n  const inboundFee = useMemo(() => {\n    // get inbound gasRate with fee option\n\n    const gasRate = getGasRateByFeeOption({\n      inboundData,\n      chain: inputAsset.L1Chain,\n      feeOptionType,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: inputAsset,\n      gasRate,\n      direction: 'inbound',\n    })\n\n    return networkFee\n  }, [inputAsset, inboundData, feeOptionType])\n\n  const outboundFee = useMemo(() => {\n    if (!outputAsset) return null\n\n    const gasRate = getGasRateByChain({\n      inboundData,\n      chain: outputAsset.L1Chain,\n    })\n    const networkFee = NetworkFee.getNetworkFeeByAsset({\n      asset: outputAsset,\n      gasRate,\n      direction: 'outbound',\n    })\n\n    return networkFee\n  }, [outputAsset, inboundData])\n\n  const totalFee = useMemo(() => {\n    if (!outboundFee) return inboundFee\n\n    const outboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        outboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n\n    if (inboundFee.asset.eq(inputAsset)) {\n      return inboundFee.add(outboundFeeInSendAsset)\n    }\n\n    const inboundFeeInSendAsset = new AssetAmount(\n      inputAsset,\n      Amount.fromAssetAmount(\n        inboundFee.totalPriceIn(inputAsset, pools).price,\n        inputAsset.decimal,\n      ),\n    )\n    return inboundFeeInSendAsset.add(outboundFeeInSendAsset)\n  }, [inputAsset, inboundFee, outboundFee, pools])\n\n  const totalFeeInUSD = useMemo(\n    () => totalFee.totalPriceIn(Asset.USD(), pools),\n    [totalFee, pools],\n  )\n\n  return {\n    totalFee,\n    inboundFee,\n    outboundFee,\n    totalFeeInUSD,\n  }\n}\n\nexport const getSumAmountInUSD = (\n  assetAmount1: AssetAmount | null,\n  assetAmount2: AssetAmount | null,\n  pools: Pool[],\n) => {\n  const assetAmount1InUSD = assetAmount1?.totalPriceIn(Asset.USD(), pools)\n  const assetAmount2InUSD = assetAmount2?.totalPriceIn(Asset.USD(), pools)\n\n  if (assetAmount1 === null && assetAmount2InUSD)\n    return assetAmount2InUSD.toCurrencyFormat()\n  if (assetAmount2 === null && assetAmount1InUSD)\n    return assetAmount1InUSD.toCurrencyFormat()\n\n  if (assetAmount1InUSD && assetAmount2InUSD) {\n    const sum = assetAmount1InUSD.raw().plus(assetAmount2InUSD.raw())\n\n    return Amount.fromAssetAmount(sum, 8).toFixed(2)\n  }\n\n  return Amount.fromAssetAmount(0, 8).toFixed()\n}\n","import { useCallback } from 'react'\n\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, SubmitTx, TxTrackerType } from 'redux/midgard/types'\n\n/**\n * 1. send transaction and get txHash\n * 2. poll midgard action API and get \"in\" tx with the same txHash\n * 3. check action status (success, pending)\n * 4. check action type and match with send tx type\n *    (if action type is not \"refund\", action type should be matched to the send type)\n */\n\nexport const useTxTracker = () => {\n  const {\n    addNewTxTracker,\n    updateTxTracker,\n    clearTxTrackers,\n    processSubmittedTx,\n  } = useMidgard()\n\n  // confirm and submit a transaction\n  const submitTransaction = useCallback(\n    ({\n      type,\n      submitTx,\n    }: {\n      type: TxTrackerType\n      submitTx: SubmitTx\n    }): string => {\n      const uuid = uuidv4()\n\n      addNewTxTracker({\n        uuid,\n        type,\n        status: TxTrackerStatus.Submitting,\n        submitTx,\n        action: null,\n        refunded: null,\n      })\n\n      return uuid\n    },\n    [addNewTxTracker],\n  )\n\n  // start polling a transaction\n  const pollTransaction = useCallback(\n    ({\n      uuid,\n      submitTx,\n      type,\n    }: {\n      uuid: string\n      submitTx: SubmitTx\n      type: TxTrackerType\n    }) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Pending,\n          submitTx,\n        },\n      })\n      processSubmittedTx({ submitTx, type })\n    },\n    [updateTxTracker, processSubmittedTx],\n  )\n\n  // start polling a transaction\n  const setTxFailed = useCallback(\n    (uuid: string) => {\n      updateTxTracker({\n        uuid,\n        txTracker: {\n          status: TxTrackerStatus.Failed,\n        },\n      })\n    },\n    [updateTxTracker],\n  )\n\n  return {\n    submitTransaction,\n    pollTransaction,\n    clearTxTrackers,\n    setTxFailed,\n  }\n}\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${encode(object.fragmentIdentifier, options)}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","import { useLocation } from 'react-router-dom'\n\nimport { decode } from 'jwt-simple'\nimport queryString from 'query-string'\n\nimport { ADDRESS } from 'multichain-sdk/config'\n\nconst useAffiliates = (): string[] | null => {\n  const query = queryString.parse(useLocation().search)\n  if (query.refs) {\n    try {\n      return JSON.parse(decode(query.refs as string, ADDRESS as string))\n    } catch (e) {\n      return null\n    }\n  }\n  return null\n}\n\nexport default useAffiliates\n","// import { transparentize } from 'polished'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nimport { media } from 'helpers/style'\n\nimport { Panel } from '../../../components/Panel'\n\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n\n  background: transparent;\n  width: 100vw;\n  max-width: 670px;\n  margin: auto auto auto auto;\n  //margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n  align-items: center;\n`\n\nexport const ContentPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n\n  padding: 16px 8px 16px 8px;\n\n  ${media.sm`\n    padding: 16px 12px 4px 12px;\n  `}\n`\n\nexport const HeaderContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n  padding: 0 10px;\n`\n\nexport const HeaderMenu = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const HeaderActions = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const PoolDetailLink = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n  color: ${palette('text', 0)};\n`\n\nexport const MenuIconWrapper = styled.div<{ selected: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 20px;\n\n  font-weight: ${(props) => (props.selected ? 'bold' : 'normal')};\n\n  svg {\n    color: ${(props) =>\n      props.selected ? palette('primary', 0) : palette('text', 0)};\n  }\n`\n","import React from 'react'\n\n// import { Link } from 'react-router-dom'\n// import { SwapOutlined } from '@ant-design/icons'\n// import { TxManager } from 'components/TxManager'\n\n// import { useGlobalState } from 'redux/hooks'\n\n// import { useMedia } from 'hooks/useMedia'\n\nimport { ContentTitle } from '../../../components'\nimport { Helmet } from '../../../components/Helmet'\n// import { Refresh } from '../../../components/Refresh'\nimport { SettingsOverlay } from '../../../components/SettingsOverlay'\nimport { Asset } from '../../../multichain-sdk'\nimport * as Styled from './PanelView.style'\n\nexport type PanelViewProps = {\n  type: 'swap' | 'pending' | 'savings'\n  meta: string\n  poolAsset: Asset\n  children: React.ReactNode\n}\n\n// const SwapButton = ({ selected }: { selected: boolean }) => (\n//   <CoreButton>\n//     <Tooltip tooltip=\"Swap\" placement=\"top\">\n//       <Styled.MenuIconWrapper selected={selected}>\n//         <SwapOutlined />\n//       </Styled.MenuIconWrapper>\n//     </Tooltip>\n//   </CoreButton>\n// )\n\n// type MenuButtonProps = {\n//   selected: boolean\n//   route: string\n//   children: React.ReactElement\n// }\n\n// const MenuButton: React.FC<MenuButtonProps> = ({\n//   selected,\n//   route,\n//   children,\n// }) => {\n//   if (selected) {\n//     return children\n//   }\n\n//   return <Link to={route}>{children}</Link>\n// }\n\nexport const PanelView = ({\n  // type,\n  meta,\n  // poolAsset,\n  children,\n}: PanelViewProps) => {\n  // const swapRoute = useMemo(() => {\n  //   return getSwapRoute(poolAsset, Asset.RUNE())\n  // }, [poolAsset])\n\n  // const { refreshPage } = useGlobalState()\n  // const isGadgetVisible = useMedia('(min-width: 824px)')\n  // const isRefreshVisible = useMedia('(min-width: 375px)')\n\n  return (\n    <Styled.Container>\n      <Helmet title={meta} content={meta} />\n      <ContentTitle>\n        <Styled.HeaderContent>\n          {/* <TxManager /> */}\n          <Styled.HeaderMenu>\n            {/* {isRefreshVisible && <Refresh onRefresh={refreshPage} />} */}\n            {/* <MenuButton selected={type === 'swap'} route={swapRoute}>\n              <SwapButton selected={type === 'swap'} />\n            </MenuButton> */}\n          </Styled.HeaderMenu>\n          <SettingsOverlay />\n        </Styled.HeaderContent>\n      </ContentTitle>\n      <Styled.ContentPanel>{children}</Styled.ContentPanel>\n    </Styled.Container>\n  )\n}\n","import { FancyButton, Panel } from 'components'\n// import { transparentize } from 'polished'\nimport styled from 'styled-components/macro'\nimport { palette } from 'styled-theme'\n\nexport const ToolContainer = styled.div`\n  display: box;\n  margin-top: 13px;\n  margin-bottom: 3px;\n  height: 40px;\n`\n\nexport const WalletSetupLink = styled.a`\n  text-transform: lowercase;\n  color: #71f6ab;\n  margin-top: 1.5vw;\n`\n\nexport const SliderWrapper = styled.div`\n  margin: auto;\n  width: 95%;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SwitchPair = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n\n  svg {\n    width: 24px;\n    height: 24px;\n    color: ${palette('text', 5)};\n    transform: rotate(90deg);\n  }\n`\n\nexport const ConfirmButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 1%;\n\n  margin-top: 5vh;\n  margin-bottom: 2vh;\n\n  button {\n    flex: 1;\n  }\n`\n\nexport const ConfirmModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nexport const RecipientAddrWrapper = styled.div`\n  margin-top: 14px;\n`\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  padding: 8px;\n  margin-top: 14px;\n\n  // border: 1px solid ${palette('gray', 0)};\n  // border-radius: 4px;\n`\n\nexport const ApproveBtn = styled(FancyButton)`\n  margin-right: 8px;\n`\nexport const Container = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n\n  background: transparent;\n  width: 90vw;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  //margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n\n  border-radius: 10px;\n  border: none;\n  align-items: center;\n`\nexport const AnimationContainer = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n\n  background: transparent;\n  width: 90vw;\n  max-width: 500px;\n  margin: auto auto auto auto;\n  //margin-bottom: 2vh;\n  padding-top: 0px;\n  padding-right: auto;\n  padding-left: auto;\n\n  border-radius: 10px;\n  border: none;\n  align-items: center;\n  position: fixed;\n  top: 8vh;\n  left: 50%;\n  transform: translateX(-50%);\n`\n","import { Asset, Swap, SynthType } from 'multichain-sdk'\n\nimport { TxTrackerType } from 'redux/midgard/types'\n\nimport { Pair } from './types'\n\nexport const getSwapPair = async (pair: string): Promise<Pair | null> => {\n  if (!pair || pair.split('_').length !== 2) {\n    return null\n  }\n\n  const input = pair.split('_')?.[0]\n  const output = pair.split('_')?.[1]\n\n  if (!input || !output) return null\n\n  const inputAsset = Asset.decodeFromURL(input)\n  const outputAsset = Asset.decodeFromURL(output)\n\n  if (!inputAsset || !outputAsset) return null\n\n  await inputAsset.setDecimal()\n  await outputAsset.setDecimal()\n\n  return {\n    inputAsset,\n    outputAsset,\n  }\n}\n\nexport const getSwapTrackerType = (swap: Swap): TxTrackerType => {\n  if (swap.inputAsset.isSynth || swap.outputAsset.isSynth) {\n    if (swap.synthType === SynthType.MINT) {\n      return TxTrackerType.Mint\n    }\n    if (swap.synthType === SynthType.REDEEM) {\n      return TxTrackerType.Redeem\n    }\n  }\n\n  return TxTrackerType.Swap\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\n\nimport { useHistory, useParams } from 'react-router'\n\n// import { SwapOutlined } from '@ant-design/icons'\nimport { SwapOutlined } from '@ant-design/icons'\nimport { Chain } from '@xchainjs/xchain-util'\nimport {\n  AddressSelectCard,\n  AssetInputCard,\n  // Slider,\n  ConfirmModal,\n  Information,\n  Notification,\n  IconButton,\n  FancyButton,\n} from 'components'\nimport {\n  // getInputAssets,\n  Amount,\n  Asset,\n  AssetAmount,\n  getWalletAddressByChain,\n  Swap,\n  Percent,\n  Price,\n  getAssetBalance,\n  SupportedChain,\n  hasWalletConnected,\n  hasConnectedWallet,\n  AmountType,\n} from 'multichain-sdk'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nimport { AFFILIATE_FEE } from 'multichain-sdk/config'\n\nimport { useApp } from 'redux/app/hooks'\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus, TxTrackerType } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport useAffiliates from 'hooks/useAffiliates'\nimport { useApprove } from 'hooks/useApprove'\nimport { useBalance } from 'hooks/useBalance'\nimport { useMimir } from 'hooks/useMimir'\nimport { useNetworkFee } from 'hooks/useNetworkFee'\nimport { useTxTracker } from 'hooks/useTxTracker'\n\nimport { multichain } from 'services/multichain'\n\nimport { translateErrorMsg } from 'helpers/error'\nimport { getAffiliates, setAffiliates } from 'helpers/storage'\nimport { truncateAddress } from 'helpers/string'\n\nimport { IS_SYNTH_ACTIVE, IS_TESTNET } from 'settings/config'\nimport { getSwapRoute } from 'settings/constants'\nimport {\n  TX_FEE_TOOLTIP_LABEL,\n  SLIP_TOOLTIP_LABEL,\n  // ESTIMATED_TIME_LABEL,\n  MIN_RECEIVED_LABEL,\n} from 'settings/constants/label'\n\nimport { PanelView } from './PanelView'\nimport * as Styled from './Swap.style'\nimport { Pair } from './types'\nimport { getSwapPair, getSwapTrackerType } from './utils'\n\nconst SwapView = () => {\n  const refs = useAffiliates()\n  useEffect(() => {\n    if (refs && getAffiliates() === null) {\n      const affiliateAddresses: string[] = refs\n      const filteredAddresses = affiliateAddresses.filter((affiliateAddress) =>\n        multichain.validateAddress({\n          chain: Chain.THORChain,\n          address: affiliateAddress,\n        }),\n      )\n      setAffiliates(filteredAddresses)\n    }\n  }, [refs])\n  let { pair } = useParams<{ pair: string }>()\n  const [swapPair, setSwapPair] = useState<Pair>()\n  if (!pair || pair === '') {\n    pair = 'BTC.BTC_THOR.RUNE'\n  }\n  useEffect(() => {\n    const getPair = async () => {\n      const swapPairData = await getSwapPair(pair)\n\n      if (swapPairData) {\n        setSwapPair(swapPairData)\n      }\n    }\n\n    getPair()\n  }, [pair])\n\n  if (swapPair) {\n    const { inputAsset, outputAsset } = swapPair\n    return <SwapPage inputAsset={inputAsset} outputAsset={outputAsset} />\n  }\n\n  return null\n}\nconst FromCard = styled.div`\n  background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    #black\n  );\n  border-radius: 4px;\n  height: 145px;\n`\n\nconst ToCard = styled.div`\n  background-image: linear-gradient(\n    120deg,\n    ${palette('background', 6)},\n    #black\n  );\n  border-radius: 4px;\n  height: 145px;\n`\n\n// const StyledSliderWrapper = styled.div`\n//   width: 90%;\n//   margin: auto;\n// `\n\nconst SwapPage = ({ inputAsset, outputAsset }: Pair) => {\n  const history = useHistory()\n  const { wallet, getMaxBalance } = useBalance()\n  const { pools: allPools, poolLoading, inboundData } = useMidgard()\n  const { slippageTolerance, affiliates } = useApp()\n  const { haltedChains } = useMimir()\n  const { isWalletLoading, setIsConnectModalOpen } = useWallet()\n  const isConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  const handleClickWalletBtn = useCallback(() => {\n    if (!isConnected && !isWalletLoading) {\n      setIsConnectModalOpen(true)\n    }\n  }, [isConnected, isWalletLoading, setIsConnectModalOpen])\n\n  const filteredAffiliates = useMemo(\n    () =>\n      affiliates?.filter((affiliate) =>\n        multichain.validateAddress({\n          chain: Chain.THORChain,\n          address: affiliate,\n        }),\n      ),\n    [affiliates],\n  )\n  const { submitTransaction, pollTransaction, setTxFailed } = useTxTracker()\n  const { isApproved, assetApproveStatus } = useApprove(inputAsset, !!wallet)\n  const isTradingHalted: boolean = useMemo(() => {\n    const inTradeInboundData = inboundData.find(\n      (data) => data.chain === inputAsset.chain,\n    )\n    const outTradeInboundData = inboundData.find(\n      (data) => data.chain === outputAsset.chain,\n    )\n\n    const inTradeMimirStatus =\n      haltedChains[inputAsset.L1Chain as SupportedChain]\n    const outTradeMimirStatus =\n      haltedChains[outputAsset.L1Chain as SupportedChain]\n    return (\n      (inTradeInboundData?.halted ?? false) ||\n      (outTradeInboundData?.halted ?? false) ||\n      inTradeMimirStatus ||\n      outTradeMimirStatus\n    )\n  }, [inboundData, haltedChains, inputAsset, outputAsset])\n\n  const { inboundFee, outboundFee, totalFee } = useNetworkFee({\n    inputAsset,\n    outputAsset,\n  })\n\n  const walletConnected = useMemo(\n    () => hasWalletConnected({ wallet, inputAssets: [inputAsset] }),\n    [wallet, inputAsset],\n  )\n\n  const pools = useMemo(\n    () => allPools.filter((data) => data.detail.status === 'available'),\n    [allPools],\n  )\n  const poolAssets = useMemo(() => {\n    const assets = pools.map((pool) => pool.asset)\n    assets.push(Asset.RUNE())\n    // TODO: Get Luna from pool data when launched on Thorchain: remove Luna from the list.\n    assets.push(Asset.LUNA())\n    return assets\n  }, [pools])\n\n  const synthAssets = useMemo(() => {\n    return pools.map((pool) => {\n      const { asset } = pool\n      const synthAsset = new Asset(asset.chain, asset.symbol, true)\n      synthAsset.isSynth = true\n\n      return synthAsset\n    })\n  }, [pools])\n\n  const outputAssets = useMemo(() => {\n    if (IS_SYNTH_ACTIVE) {\n      return [...poolAssets, ...synthAssets]\n    }\n    return poolAssets\n  }, [poolAssets, synthAssets])\n\n  // const inputAssets = useMemo(\n  //   () =>\n  //     hasConnectedWallet(wallet)\n  //       ? getInputAssets({ wallet, pools })\n  //       : outputAssets,\n  //   [wallet, pools, outputAssets],\n  // )\n\n  const [inputAmount, setInputAmount] = useState<Amount>(\n    Amount.fromAssetAmount(0, 8),\n  )\n  // const [percent, setPercent] = useState(0)\n  const [chainRecipient, setChainRecipient] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\n  const [visibleApproveModal, setVisibleApproveModal] = useState(false)\n  const affiliateFee = useMemo(\n    () =>\n      !inputAsset.isLTC() && !inputAsset.isBTC() && !inputAsset.isDOGE()\n        ? inputAmount.mul(AFFILIATE_FEE)\n        : new Amount(0, AmountType.ASSET_AMOUNT, 4),\n    [inputAmount, inputAsset],\n  )\n  const totalFeePlusAffiliate = useMemo(\n    () =>\n      !inputAsset.isLTC() && !inputAsset.isBTC() && !inputAsset.isDOGE()\n        ? totalFee\n            .add(new AssetAmount(inputAsset, affiliateFee))\n            .totalPriceIn(Asset.USD(), pools)\n        : totalFee,\n    [affiliateFee, inputAsset, pools, totalFee],\n  )\n  const isValidAddress = useMemo(\n    () =>\n      multichain.validateAddress({\n        chain: outputAsset.L1Chain,\n        address: recipient,\n      }),\n    [outputAsset, recipient],\n  )\n\n  const swap: Swap | null = useMemo(() => {\n    if (poolLoading) return null\n\n    try {\n      const inputAssetAmount = new AssetAmount(inputAsset, inputAmount)\n\n      const inboundFeeInInputAsset = new AssetAmount(\n        inputAsset,\n        Amount.fromAssetAmount(\n          inboundFee.totalPriceIn(inputAsset, pools).price,\n          inputAsset.decimal,\n        ),\n      )\n\n      const outboundFeeInOutputAsset = outboundFee\n        ? new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(\n              outboundFee.totalPriceIn(outputAsset, pools).price,\n              outputAsset.decimal,\n            ),\n          )\n        : new AssetAmount(\n            outputAsset,\n            Amount.fromAssetAmount(0, outputAsset.decimal),\n          )\n\n      return new Swap({\n        inputAsset,\n        outputAsset,\n        pools,\n        amount: inputAssetAmount,\n        slip: slippageTolerance,\n        fee: {\n          inboundFee: inboundFeeInInputAsset,\n          outboundFee: outboundFeeInOutputAsset,\n        },\n      })\n    } catch (error) {\n      console.log(error)\n      return null\n    }\n  }, [\n    inputAsset,\n    outputAsset,\n    pools,\n    inputAmount,\n    slippageTolerance,\n    poolLoading,\n    inboundFee,\n    outboundFee,\n  ])\n\n  const outputAmount: Amount = useMemo(() => {\n    if (swap) {\n      return swap.outputAmountAfterFee.amount\n    }\n\n    return Amount.fromAssetAmount(0, 8)\n  }, [swap])\n\n  const slipPercent: Percent = useMemo(\n    () => (swap ? swap.slip : new Percent(0)),\n    [swap],\n  )\n\n  const minReceive: Amount = useMemo(\n    () => (swap ? swap.minOutputAmount : Amount.fromAssetAmount(0, 8)),\n    [swap],\n  )\n\n  const inputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: inputAsset,\n        pools,\n        priceAmount: inputAmount,\n      }),\n    [inputAsset, inputAmount, pools],\n  )\n\n  const outputAssetPriceInUSD = useMemo(\n    () =>\n      new Price({\n        baseAsset: outputAsset,\n        pools,\n        priceAmount: outputAmount,\n      }),\n    [outputAsset, outputAmount, pools],\n  )\n\n  useEffect(() => {\n    if (wallet) {\n      const address = getWalletAddressByChain(wallet, outputAsset.L1Chain)\n      setRecipient(address || '')\n      setChainRecipient(address || '')\n    }\n  }, [wallet, outputAsset])\n\n  const maxInputBalance: Amount = useMemo(() => getMaxBalance(inputAsset), [\n    inputAsset,\n    getMaxBalance,\n  ])\n\n  const inputAssetBalance: Amount = useMemo(() => {\n    if (!wallet) {\n      // allow max amount for emulation if wallet is not connected\n      return Amount.fromAssetAmount(10 ** 3, 8)\n    }\n\n    return getAssetBalance(inputAsset, wallet)\n  }, [inputAsset, wallet])\n\n  const handleSelectInputAsset = useCallback(\n    (input: Asset) => {\n      history.push(getSwapRoute(input, outputAsset))\n    },\n    [history, outputAsset],\n  )\n\n  const handleSelectOutputAsset = useCallback(\n    (output: Asset) => {\n      history.push(getSwapRoute(inputAsset, output))\n    },\n    [history, inputAsset],\n  )\n\n  const handleSwitchPair = useCallback(() => {\n    history.push(getSwapRoute(outputAsset, inputAsset))\n  }, [history, inputAsset, outputAsset])\n\n  const handleChangeInputAmount = useCallback(\n    (amount: Amount) => {\n      if (amount.gt(maxInputBalance)) {\n        setInputAmount(maxInputBalance)\n        // setPercent(100)\n      } else {\n        setInputAmount(amount)\n        // setPercent(amount.div(maxInputBalance).mul(100).assetAmount.toNumber())\n      }\n    },\n    [maxInputBalance],\n  )\n\n  const handleChangePercent = useCallback(\n    (p: number) => {\n      // setPercent(p)\n      const newAmount = maxInputBalance.mul(p).div(100)\n      setInputAmount(newAmount)\n    },\n    [maxInputBalance],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    handleChangePercent(100)\n  }, [handleChangePercent])\n\n  const handleConfirm = useCallback(async () => {\n    setVisibleConfirmModal(false)\n\n    if (wallet && swap) {\n      const trackerType = getSwapTrackerType(swap)\n\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: trackerType,\n        submitTx: {\n          inAssets: [\n            {\n              asset: swap.inputAsset.toString(),\n              amount: swap.inputAmount.toSignificant(6),\n            },\n          ],\n          outAssets: [\n            {\n              asset: swap.outputAsset.toString(),\n              amount: swap.outputAmountAfterFee.toSignificant(6),\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.swap(\n          swap,\n          recipient,\n          filteredAffiliates,\n        )\n\n        // start polling\n        pollTransaction({\n          type: trackerType,\n          uuid: trackId,\n          submitTx: {\n            inAssets: [\n              {\n                asset: swap.inputAsset.toString(),\n                amount: swap.inputAmount.toSignificant(6),\n              },\n            ],\n            outAssets: [\n              {\n                asset: swap.outputAsset.toString(),\n                amount: swap.outputAmountAfterFee.toSignificant(6),\n              },\n            ],\n            txID: txHash,\n          },\n        })\n      } catch (error: any) {\n        setTxFailed(trackId)\n\n        // handle better error message\n        const description = translateErrorMsg(error?.toString())\n\n        Notification({\n          type: 'error',\n          message: 'Submit Transaction Failed.',\n          description,\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [\n    wallet,\n    swap,\n    recipient,\n    filteredAffiliates,\n    submitTransaction,\n    pollTransaction,\n    setTxFailed,\n  ])\n\n  const handleCancel = useCallback(() => {\n    setVisibleConfirmModal(false)\n  }, [])\n\n  const handleConfirmApprove = useCallback(async () => {\n    setVisibleApproveModal(false)\n\n    if (wallet) {\n      // register to tx tracker\n      const trackId = submitTransaction({\n        type: TxTrackerType.Approve,\n        submitTx: {\n          inAssets: [\n            {\n              asset: inputAsset.toString(),\n              amount: '0', // not needed for approve tx\n            },\n          ],\n        },\n      })\n\n      try {\n        const txHash = await multichain.approveAsset(inputAsset)\n        console.log('approve txhash', txHash)\n        if (txHash) {\n          // start polling\n          pollTransaction({\n            type: TxTrackerType.Swap,\n            uuid: trackId,\n            submitTx: {\n              inAssets: [\n                {\n                  asset: inputAsset.toString(),\n                  amount: '0', // not needed for approve tx\n                },\n              ],\n              txID: txHash,\n            },\n          })\n        }\n      } catch (error) {\n        setTxFailed(trackId)\n        Notification({\n          type: 'open',\n          message: 'Approve Failed.',\n          duration: 20,\n        })\n        console.log(error)\n      }\n    }\n  }, [inputAsset, wallet, setTxFailed, submitTransaction, pollTransaction])\n\n  const handleSwap = useCallback(() => {\n    if (walletConnected && swap) {\n      if (swap.hasInSufficientFee) {\n        Notification({\n          type: 'info',\n          message: 'Swap Insufficient Fee',\n          description: 'Input amount is not enough to cover the fee',\n        })\n        return\n      }\n\n      if (!isValidAddress) {\n        Notification({\n          type: 'error',\n          message: 'Invalid Recipient Address',\n          description: 'Recipient address should be a valid address.',\n        })\n        return\n      }\n\n      setVisibleConfirmModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [isValidAddress, walletConnected, swap])\n\n  const handleApprove = useCallback(() => {\n    if (walletConnected && swap) {\n      setVisibleApproveModal(true)\n    } else {\n      Notification({\n        type: 'info',\n        message: 'Wallet Not Found',\n        description: 'Please connect wallet',\n      })\n    }\n  }, [walletConnected, swap])\n\n  const isValidSwap = useMemo(() => {\n    if (isTradingHalted && !IS_TESTNET) {\n      return {\n        valid: false,\n        msg: 'Swap not available',\n      }\n    }\n\n    return swap?.isValid() ?? { valid: false }\n  }, [swap, isTradingHalted])\n\n  const isValidSlip = useMemo(() => swap?.isSlipValid() ?? true, [swap])\n\n  const btnLabel = useMemo(() => {\n    if (isValidSwap.valid || inputAmount.eq(0)) {\n      if (!isConnected) {\n        return 'Connect Wallet'\n      }\n      if (inputAsset.isSynth && outputAsset.isSynth) {\n        return 'Buy RUNE'\n      }\n      if (inputAsset.isSynth) {\n        return 'Redeem'\n      }\n      if (outputAsset.isSynth) {\n        return 'Mint'\n      }\n      return 'Buy RUNE'\n    }\n\n    return isValidSwap?.msg ?? 'Buy RUNE'\n  }, [\n    isValidSwap.valid,\n    isValidSwap?.msg,\n    inputAmount,\n    isConnected,\n    inputAsset.isSynth,\n    outputAsset.isSynth,\n  ])\n\n  const renderConfirmModalContent = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title=\"Send\"\n          description={`${inputAmount.toSignificant(\n            6,\n          )} ${inputAsset.name.toUpperCase()}`}\n        />\n        <Information\n          title=\"Recipient\"\n          description={`${outputAmount.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n        />\n        <br />\n        <Information\n          title=\"Recipient Address\"\n          description={truncateAddress(recipient)}\n          error={!isValidAddress}\n        />\n        <br />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Affiliate Fee\"\n          description={`${\n            affiliateFee.toSignificant(4) ?? ''\n          } ${inputAsset.name.toUpperCase()}`}\n          tooltip={\n            inputAsset.isBTC() || inputAsset.isLTC() || inputAsset.isDOGE()\n              ? 'There is currenly no affiliate fee for BTC, LTC or DOGE transactions.'\n              : `Transaction fee of ${(AFFILIATE_FEE * 100).toFixed(\n                  0,\n                )}% used to pay affiliates and fund TerraYield.com development.`\n          }\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Thorchain network fee used to pay outbound transaction\"\n        />\n        <Information\n          title=\"Total\"\n          description={totalFeePlusAffiliate.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [\n    inputAmount,\n    outputAmount,\n    inputAsset,\n    outputAsset,\n    recipient,\n    slipPercent,\n    isValidSlip,\n    minReceive,\n    inboundFee,\n    outboundFee,\n    // totalFeeInUSD,\n    // estimatedTime,\n    affiliateFee,\n    isValidAddress,\n    totalFeePlusAffiliate,\n  ])\n\n  const renderApproveModal = useMemo(() => {\n    return (\n      <Styled.ConfirmModalContent>\n        <Information\n          title={`Approve ${inputAsset.name.toUpperCase()}`}\n          description=\"\"\n        />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n      </Styled.ConfirmModalContent>\n    )\n  }, [inboundFee, inputAsset])\n\n  const title = useMemo(\n    () => `Swap ${inputAsset.name} >> ${outputAsset.name}`,\n    [inputAsset, outputAsset],\n  )\n  const poolAsset = useMemo(\n    () => (inputAsset.isRUNE() ? outputAsset : inputAsset),\n    [inputAsset, outputAsset],\n  )\n  // const showApp = false\n  return (\n    <PanelView meta={title} poolAsset={poolAsset} type=\"swap\">\n      <FromCard>\n        <AssetInputCard\n          title=\"from\"\n          asset={inputAsset}\n          assets={outputAssets}\n          amount={inputAmount}\n          balance={inputAssetBalance}\n          onChange={handleChangeInputAmount}\n          onSelect={handleSelectInputAsset}\n          onMax={handleSelectMax}\n          usdPrice={inputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n      </FromCard>\n      <Styled.ToolContainer>\n        <Styled.SwitchPair>\n          <IconButton onClick={handleSwitchPair}>\n            <SwapOutlined />\n          </IconButton>\n        </Styled.SwitchPair>\n      </Styled.ToolContainer>\n      <ToCard>\n        <AssetInputCard\n          title=\"to\"\n          asset={outputAsset}\n          assets={outputAssets}\n          amount={outputAmount}\n          onSelect={handleSelectOutputAsset}\n          inputProps={{ disabled: true }}\n          usdPrice={outputAssetPriceInUSD}\n          wallet={wallet || undefined}\n        />\n        <Styled.RecipientAddrWrapper>\n          <AddressSelectCard\n            title=\"address\"\n            address={recipient}\n            chain={outputAsset.L1Chain}\n            chainAddr={chainRecipient}\n            onAddressChange={setRecipient}\n          />\n        </Styled.RecipientAddrWrapper>\n      </ToCard>\n      <Styled.SwapInfo>\n        {/* <PriceRate\n          price={swap?.price}\n          inputAsset={swap?.inputAsset}\n          outputAsset={swap?.outputAsset}\n        />\n        <Information\n          title=\"Slip\"\n          description={slipPercent.toFixed(3)}\n          error={!isValidSlip}\n          tooltip={SLIP_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Min Received\"\n          description={`${minReceive.toSignificant(\n            6,\n          )} ${outputAsset.name.toUpperCase()}`}\n          tooltip={MIN_RECEIVED_LABEL}\n        />\n\n        <br />\n        <Information\n          title=\"Transaction Fee\"\n          description={inboundFee.toCurrencyFormat()}\n          tooltip={TX_FEE_TOOLTIP_LABEL}\n        />\n        <Information\n          title=\"Network Fee\"\n          description={outboundFee?.toCurrencyFormat() ?? ''}\n          tooltip=\"Estimated network fee used to pay outbound transaction\"\n        /> */}\n        {/* <Information\n          title=\"Total Fee\"\n          description={totalFeePlusAffiliate?.toCurrencyFormat(2) ?? ''}\n          tooltip=\"Sum of both transaction fee and network fee\"\n        /> */}\n      </Styled.SwapInfo>\n      {isApproved !== null && wallet && (\n        <Styled.ConfirmButtonContainer>\n          {!isApproved && (\n            <Styled.ApproveBtn\n              onClick={handleApprove}\n              error={!isValidSwap.valid}\n              disabled={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n              loading={\n                assetApproveStatus === TxTrackerStatus.Pending ||\n                assetApproveStatus === TxTrackerStatus.Submitting\n              }\n            >\n              Approve\n            </Styled.ApproveBtn>\n          )}\n          {walletConnected ? (\n            <FancyButton\n              disabled={!isApproved}\n              onClick={handleSwap}\n              error={!isValidSwap.valid}\n            >\n              {btnLabel}\n            </FancyButton>\n          ) : (\n            <FancyButton onClick={handleClickWalletBtn}>{btnLabel}</FancyButton>\n          )}\n        </Styled.ConfirmButtonContainer>\n      )}\n      {!wallet && (\n        <Styled.ConfirmButtonContainer>\n          <FancyButton onClick={handleSwap} error={!isValidSwap.valid}>\n            {btnLabel}\n          </FancyButton>\n        </Styled.ConfirmButtonContainer>\n      )}\n      <ConfirmModal\n        visible={visibleConfirmModal}\n        onOk={handleConfirm}\n        onCancel={handleCancel}\n        inputAssets={[inputAsset]}\n      >\n        {renderConfirmModalContent}\n      </ConfirmModal>\n      <ConfirmModal\n        visible={visibleApproveModal}\n        onOk={handleConfirmApprove}\n        onCancel={() => setVisibleApproveModal(false)}\n        inputAssets={[inputAsset]}\n      >\n        {renderApproveModal}\n      </ConfirmModal>\n    </PanelView>\n  )\n}\n\nexport default SwapView\n","import { useEffect, useState, useMemo } from 'react'\n\nimport { Asset, hasConnectedWallet } from 'multichain-sdk'\n\nimport { useMidgard } from 'redux/midgard/hooks'\nimport { TxTrackerStatus } from 'redux/midgard/types'\nimport { useWallet } from 'redux/wallet/hooks'\n\nimport { multichain } from 'services/multichain'\n\nexport const useApprove = (asset: Asset, hasWallet = true) => {\n  const { approveStatus } = useMidgard()\n  const { wallet } = useWallet()\n  const [isApproved, setApproved] = useState<boolean | null>(\n    hasWallet ? null : true,\n  )\n\n  const isWalletConnected = useMemo(() => hasConnectedWallet(wallet), [wallet])\n\n  useEffect(() => {\n    if (!hasWallet || !isWalletConnected) {\n      setApproved(true)\n      return\n    }\n\n    const checkApproved = async () => {\n      if (approveStatus?.[asset.toString()] === TxTrackerStatus.Success) {\n        setApproved(true)\n      }\n      const approved = await multichain.isAssetApproved(asset)\n      setApproved(approved)\n    }\n\n    checkApproved()\n  }, [asset, approveStatus, hasWallet, isWalletConnected])\n\n  const assetApproveStatus = useMemo(() => approveStatus?.[asset.toString()], [\n    approveStatus,\n    asset,\n  ])\n\n  return {\n    assetApproveStatus,\n    isApproved,\n  }\n}\n","const ORIGIN_UTXO_ERROR_MSG = 'No utxos to send'\nconst PROCESSED_UTXO_ERROR_MSG =\n  'Please wait a bit until UTXOs are confirmed and Try again.'\n\nexport const translateErrorMsg = (msg: string) => {\n  if (msg.includes(ORIGIN_UTXO_ERROR_MSG)) {\n    return PROCESSED_UTXO_ERROR_MSG\n  }\n\n  return msg\n}\n","import Swap from './Swap'\n\nexport default Swap\n"],"sourceRoot":""}